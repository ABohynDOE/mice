
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "mice"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('mice')
Loading required package: lattice

Attaching package: ‘mice’

The following objects are masked from ‘package:base’:

    cbind, rbind

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("ampute")
> ### * ampute
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ampute
> ### Title: Generate Missing Data for Simulation Purposes
> ### Aliases: ampute
> 
> ### ** Examples
> 
> # Simulate data set with \code{mvrnorm} from package \code{\pkg{MASS}}.
> require(MASS)
Loading required package: MASS
> sigma <- matrix(data = c(1, 0.2, 0.2, 0.2, 1, 0.2, 0.2, 0.2, 1), nrow = 3)
> complete.data <- mvrnorm(n = 100, mu = c(5, 5, 5), Sigma = sigma)
> # Perform quick amputation
> result1 <- ampute(data = complete.data)
> # Change default matrices as desired
> patterns <- result1$patterns
> patterns[1:3, 2] <- 0
> odds <- result1$odds
> odds[2,3:4] <- c(2, 4)
> odds[3,] <- c(3, 1, NA, NA)
> # Rerun amputation
> result2 <- ampute(data = complete.data, patterns = patterns, freq = 
+ c(0.3, 0.3, 0.4), cont = FALSE, odds = odds)
> # Run an amputation procedure with continuous probabilities
> result3 <- ampute(data = complete.data, type = c("RIGHT", "TAIL", "LEFT"))
> 
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’

> nameEx("as.mids")
> ### * as.mids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.mids
> ### Title: Converts an multiply imputed dataset (long format) into a 'mids'
> ###   object
> ### Aliases: as.mids
> ### Keywords: mids
> 
> ### ** Examples
> 
> # impute the nhanes dataset
> imp <- mice(nhanes, print = FALSE)
> # extract the data in long format
> X <- complete(imp, action = "long", include = TRUE)
> # create dataset with .imp variable as numeric
> X2 <- X
> 
> # nhanes example without .id
> test1 <- as.mids(X)
> is.mids(test1)
[1] TRUE
> identical(complete(test1, action = "long", include = TRUE), X)
[1] FALSE
> 
> # nhanes example without .id where .imp is numeric
> test2 <- as.mids(X2)
> is.mids(test2)
[1] TRUE
> identical(complete(test2, action = "long", include = TRUE), X)
[1] FALSE
> 
> # nhanes example, where we explicitly specify .id as column 2
> test3 <- as.mids(X, .id = ".id")
> is.mids(test3)
[1] TRUE
> identical(complete(test3, action = "long", include = TRUE), X)
[1] FALSE
> 
> # nhanes example with .id where .imp is numeric
> test4 <- as.mids(X2, .id = 2)
> is.mids(test4)
[1] TRUE
> identical(complete(test4, action = "long", include = TRUE), X)
[1] FALSE
> 
> # example without an .id variable
> # variable .id not preserved
> X3 <- X[, -2]
> test5 <- as.mids(X3)
> is.mids(test5)
[1] TRUE
> identical(complete(test5, action = "long", include = TRUE)[, -2], X[, -2])
[1] FALSE
> 
> # as() syntax has fewer options
> test7 <- as(X, "mids")
> test8 <- as(X2, "mids")
> test9 <- as(X2[, -2], "mids")
> rev <- ncol(X):1
> test10 <- as(X[, rev], "mids")
> 
> # where argument copies also observed data into $imp element
> where <- matrix(TRUE, nrow = nrow(nhanes), ncol = ncol(nhanes))
> colnames(where) <- colnames(nhanes)
> test11 <- as.mids(X, where = where)
> identical(complete(test11, action = "long", include = TRUE), X)
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("boys")
> ### * boys
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: boys
> ### Title: Growth of Dutch boys
> ### Aliases: boys
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> 
> # create two imputed data sets
> imp <- mice(boys, m=1, maxit=2)

 iter imp variable
  1   1  hgt  wgt  bmi  hc  gen  phb  tv  reg
  2   1  hgt  wgt  bmi  hc  gen  phb  tv  reg
> z <- complete(imp, 1)
> 
> # create imputations for age <8yrs
> plot(z$age, z$gen, col=mdc(1:2)[1+is.na(boys$gen)],
+  xlab = "Age (years)", ylab = "Tanner Stage Genital")
> 
> # figure to show that the default imputation method does not impute BMI 
> # consistently
> plot(z$bmi,z$wgt/(z$hgt/100)^2, col=mdc(1:2)[1+is.na(boys$bmi)],
+ xlab = "Imputed BMI", ylab="Calculated BMI")   
> 
> # also, BMI distributions are somewhat different
> require(MASS)
Loading required package: MASS
> oldpar <- par(mfrow=c(1,2))
> truehist(z$bmi[!is.na(boys$bmi)],h=1,xlim=c(10,30),ymax=0.25,
+ col=mdc(1),xlab="BMI observed")
> truehist(z$bmi[is.na(boys$bmi)],h=1,xlim=c(10,30),ymax=0.25,
+ col=mdc(2),xlab="BMI imputed")
> par(oldpar)
> 
> # repair the inconsistency problem by passive imputation
> meth <- imp$meth
> meth["bmi"] <- "~I(wgt/(hgt/100)^2)"
> pred <- imp$predictorMatrix
> pred["hgt","bmi"] <- 0
> pred["wgt","bmi"] <- 0
> imp2 <- mice(boys, m=1, maxit=2, meth=meth, pred=pred)

 iter imp variable
  1   1  hgt  wgt  bmi  hc  gen  phb  tv  reg
  2   1  hgt  wgt  bmi  hc  gen  phb  tv  reg
> z2 <- complete(imp2, 1)
> 
> # show that new imputations are consistent
> plot(z2$bmi,z2$wgt/(z2$hgt/100)^2, col=mdc(1:2)[1+is.na(boys$bmi)],
+ ylab="Calculated BMI")   
> 
> # and compare distributions
> oldpar <- par(mfrow=c(1,2))
> truehist(z2$bmi[!is.na(boys$bmi)],h=1,xlim=c(10,30),ymax=0.25,col=mdc(1),
+ xlab="BMI observed")
> truehist(z2$bmi[is.na(boys$bmi)],h=1,xlim=c(10,30),ymax=0.25,col=mdc(2),
+ xlab="BMI imputed")
> par(oldpar)
> 
> 
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()

detaching ‘package:MASS’

> nameEx("bwplot.mids")
> ### * bwplot.mids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bwplot.mids
> ### Title: Box-and-whisker plot of observed and imputed data
> ### Aliases: bwplot.mids bwplot
> ### Keywords: hplot
> 
> ### ** Examples
> 
> 
> imp <- mice(boys, maxit=1)

 iter imp variable
  1   1  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   2  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   3  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   4  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   5  hgt  wgt  bmi  hc  gen  phb  tv  reg
> 
> ### box-and-whisker plot per imputation of all numerical variables
> bwplot(imp)
> 
> ### tv (testicular volume), conditional on region
> bwplot(imp, tv~.imp|reg)
> 
> ### same data, organized in a different way 
> bwplot(imp, tv~reg|.imp, theme=list())
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("cbind.mids")
> ### * cbind.mids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cbind.mids
> ### Title: Combine 'mids' objects by columns
> ### Aliases: cbind.mids
> ### Keywords: manip
> 
> ### ** Examples
> 
> 
> # impute four variables at once (default)
> imp <- mice(nhanes, m = 1, maxit = 1, print = FALSE)
> imp$predictorMatrix
    age bmi hyp chl
age   0   1   1   1
bmi   1   0   1   1
hyp   1   1   0   1
chl   1   1   1   0
> 
> # impute two by two
> data1 <- nhanes[, c("age", "bmi")]
> data2 <- nhanes[, c("hyp", "chl")]
> imp1 <- mice(data1, m = 2, maxit = 1, print = FALSE)
> imp2 <- mice(data2, m = 2, maxit = 1, print = FALSE)
> 
> # Append two solutions
> imp12 <- cbind(imp1, imp2)
> 
> # This is a different imputation model
> imp12$predictorMatrix
    age bmi hyp chl
age   0   1   0   0
bmi   1   0   0   0
hyp   0   0   0   1
chl   0   0   1   0
> 
> # Append the other way around
> imp21 <- cbind(imp2, imp1)
> imp21$predictorMatrix
    hyp chl age bmi
hyp   0   1   0   0
chl   1   0   0   0
age   0   0   0   1
bmi   0   0   1   0
> 
> # Append 'forgotten' variable chl
> data3 <- nhanes[, 1:3]
> imp3  <- mice(data3, maxit = 1,m = 2, print = FALSE)
> imp4 <- cbind(imp3, chl = nhanes$chl)
> 
> # Of course, chl was not imputed
> head(complete(imp4))
  age  bmi hyp chl
1   1 30.1   1  NA
2   2 22.7   1 187
3   1 27.5   1 187
4   3 22.7   2  NA
5   1 20.4   1 113
6   3 22.7   1 184
> 
> # Combine mids object with data frame
> imp5 <- cbind(imp3, nhanes2)
> head(complete(imp5))
  age  bmi hyp age.1 bmi.1 hyp.1 chl
1   1 30.1   1 20-39    NA  <NA>  NA
2   2 22.7   1 40-59  22.7    no 187
3   1 27.5   1 20-39    NA    no 187
4   3 22.7   2 60-99    NA  <NA>  NA
5   1 20.4   1 20-39  20.4    no 113
6   3 22.7   1 60-99    NA  <NA> 184
> 
> 
> 
> cleanEx()
> nameEx("cc")
> ### * cc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cc
> ### Title: Select complete cases
> ### Aliases: cc
> ### Keywords: univar
> 
> ### ** Examples
> 
> 
> # cc(nhanes)   # get the 13 complete cases
> # cc(nhanes$bmi) # extract complete bmi
> 
> 
> 
> cleanEx()
> nameEx("cci")
> ### * cci
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cci
> ### Title: Complete case indicator
> ### Aliases: cci
> ### Keywords: univar
> 
> ### ** Examples
> 
> cci(nhanes) # indicator for 13 complete cases 
 [1] FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE
[13]  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE
[25]  TRUE
> cci(mice(nhanes, maxit = 0))
 [1] FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE
[13]  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE
[25]  TRUE
> f <- cci(nhanes[,c("bmi","hyp")]) # complete data for bmi and hyp
> nhanes[f,] # obtain all data from those with complete bmi and hyp
   age  bmi hyp chl
2    2 22.7   1 187
5    1 20.4   1 113
7    1 22.5   1 118
8    1 30.1   1 187
9    2 22.0   1 238
13   3 21.7   1 206
14   2 28.7   2 204
15   1 29.6   1  NA
17   3 27.2   2 284
18   2 26.3   2 199
19   1 35.3   1 218
20   3 25.5   2  NA
22   1 33.2   1 229
23   1 27.5   1 131
24   3 24.9   1  NA
25   2 27.4   1 186
> 
> 
> 
> cleanEx()
> nameEx("complete")
> ### * complete
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: complete
> ### Title: Extracts the completed data from a 'mids' object
> ### Aliases: complete
> ### Keywords: manip
> 
> ### ** Examples
> 
> 
> # obtain first imputed data set
> sum(is.na(nhanes2))
[1] 27
> imp <- mice(nhanes2, print = FALSE, maxit = 1)
> dat <- complete(imp)
> sum(is.na(dat))
[1] 0
> 
> # obtain stacked third and fifth imputation
> dat <- complete(imp, c(3, 5))
> 
> # obtain all datasets, with additional identifiers
> head(complete(imp, "long"))
  .imp .id   age  bmi hyp chl
1    1   1 20-39 35.3  no 238
2    1   2 40-59 22.7  no 187
3    1   3 20-39 35.3  no 187
4    1   4 60-99 27.4  no 204
5    1   5 20-39 20.4  no 113
6    1   6 60-99 28.7 yes 184
> 
> # same, but now as list, mild object
> dslist <- complete(imp, "all")
> length(dslist)
[1] 5
> 
> # same, but also include the original data
> dslist <- complete(imp, "all", include = TRUE)
> length(dslist)
[1] 6
> 
> # select original + 3 + 5, store as mild
> dslist <- complete(imp, c(0, 3, 5), mild = TRUE)
> names(dslist)
[1] "0" "3" "5"
> 
> 
> 
> 
> cleanEx()
> nameEx("construct.blocks")
> ### * construct.blocks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: construct.blocks
> ### Title: Construct blocks from 'formulas' and 'predictorMatrix'
> ### Aliases: construct.blocks
> 
> ### ** Examples
> 
> form <- name.formulas(list(bmi + hyp ~ chl + age, chl ~ bmi))
> pred <- make.predictorMatrix(nhanes[, c("age", "chl")])
> construct.blocks(formulas = form, pred = pred)
$F1
[1] "bmi" "hyp"

$chl
[1] "chl"

$age
[1] "age"

attr(,"calltype")
       F1       chl       age 
"formula" "formula"    "type" 
> 
> 
> 
> cleanEx()
> nameEx("densityplot.mids")
> ### * densityplot.mids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: densityplot.mids
> ### Title: Density plot of observed and imputed data
> ### Aliases: densityplot.mids densityplot
> ### Keywords: hplot
> 
> ### ** Examples
> 
> imp <- mice(boys, maxit=1)

 iter imp variable
  1   1  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   2  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   3  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   4  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   5  hgt  wgt  bmi  hc  gen  phb  tv  reg
> 
> ### density plot of head circumference per imputation
> ### blue is observed, red is imputed
> densityplot(imp, ~hc|.imp)
> 
> ### All combined in one panel.
> densityplot(imp, ~hc)
> 
> 
> 
> 
> cleanEx()
> nameEx("fdd")
> ### * fdd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fdd
> ### Title: SE Fireworks disaster data
> ### Aliases: fdd fdd.pred
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> 
> data <- fdd
> md.pattern(fdd)
  id trt pp sex etn age ypf1 ypf2 ypf3 ypp2 ypp3 ycf1 ycf2 ycf3 ycp2 ycp3 trtp
8  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
2  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
8  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
9  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
2  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    1
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    0
1  1   1  1   1   1   1    1    1    1    1    1    1    1    1    1    1    0
   0   0  0   0   0   0    0    0    0    0    0    0    0    0    0    0    2
  prop1 prs1 trauma ypp1 ypa1 ypb1 ypc1 yp1 prop2 prs2 ypa2 ypb2 ypc2 yp2 prop3
8     1    1      1    1    1    1    1   1     1    1    1    1    1   1     1
2     1    1      1    1    1    1    1   1     1    1    1    1    1   1     1
1     1    1      1    1    1    1    1   1     1    1    1    1    1   1     1
8     1    1      1    1    1    1    1   1     1    1    1    1    1   1     1
1     1    1      1    1    1    1    1   1     1    1    1    1    1   1     1
1     1    1      1    1    1    1    1   1     1    1    1    1    1   1     1
1     1    1      1    1    1    1    1   1     1    1    1    1    1   1     1
1     1    1      1    1    1    1    1   1     1    1    1    1    1   1     1
9     1    1      1    1    1    1    1   1     1    1    1    1    1   1     1
1     1    1      1    1    1    1    1   1     1    1    1    1    1   1     1
1     1    1      1    1    1    1    1   1     1    1    1    1    1   1     1
2     1    1      1    1    1    1    1   1     1    1    1    1    1   1     1
1     1    1      1    1    1    1    1   1     1    1    1    1    1   1     0
1     1    1      1    1    1    1    1   1     1    1    1    1    1   1     0
1     1    1      1    1    1    1    1   1     1    1    1    1    1   1     0
1     1    1      1    1    1    1    1   1     0    0    0    0    0   0     1
1     1    1      1    1    1    1    1   1     0    0    0    0    0   0     0
1     1    1      1    1    1    1    1   1     0    0    0    0    0   0     0
1     1    1      1    1    1    1    1   1     0    0    0    0    0   0     0
1     1    1      1    1    0    0    0   0     0    0    0    0    0   0     0
1     1    1      0    0    0    0    0   0     1    1    1    1    1   1     1
1     1    1      0    0    0    0    0   0     1    1    1    1    1   1     1
1     1    1      0    0    0    0    0   0     0    0    0    0    0   0     0
1     1    0      1    1    1    1    1   1     1    1    1    1    1   1     1
1     0    1      1    1    1    1    1   1     1    1    1    1    1   1     1
1     0    1      0    0    0    0    0   0     0    0    0    0    0   0     0
1     1    1      0    0    0    0    0   0     0    0    0    0    0   0     0
1     1    0      1    1    1    1    1   1     1    1    1    1    1   1     1
      2    2      5    5    6    6    6   6     8    8    8    8    8   8    10
  ypa3 ypb3 ypc3 yp3 cbcl1 cbin1 cbex1 crop1 bir1 cbcl3 cbin3 cbex3 yca1 ycb1
8    1    1    1   1     1     1     1     1    1     1     1     1    1    1
2    1    1    1   1     1     1     1     1    1     1     1     1    1    1
1    1    1    1   1     1     1     1     1    1     1     1     1    1    1
8    1    1    1   1     1     1     1     1    1     1     1     1    1    1
1    1    1    1   1     1     1     1     1    1     1     1     1    1    1
1    1    1    1   1     1     1     1     1    1     1     1     1    1    1
1    1    1    1   1     1     1     1     1    1     1     1     1    0    0
1    1    1    1   1     1     1     1     1    1     0     0     0    1    1
9    1    1    1   1     1     1     1     0    0     1     1     1    0    0
1    1    1    1   1     0     0     0     1    1     0     0     0    1    1
1    1    1    1   1     0     0     0     1    1     0     0     0    1    1
2    1    1    1   1     0     0     0     0    0     0     0     0    0    0
1    0    0    0   0     1     1     1     1    1     1     1     1    1    1
1    0    0    0   0     1     1     1     1    1     1     1     1    1    1
1    0    0    0   0     1     1     1     1    1     0     0     0    1    1
1    1    1    1   1     1     1     1     1    1     1     1     1    1    1
1    0    0    0   0     1     1     1     1    1     0     0     0    1    1
1    0    0    0   0     0     0     0     1    1     0     0     0    1    1
1    0    0    0   0     0     0     0     1    0     0     0     0    0    0
1    0    0    0   0     0     0     0     1    1     0     0     0    1    1
1    1    1    1   1     1     1     1     1    1     1     1     1    1    1
1    1    1    1   1     0     0     0     1    1     0     0     0    1    1
1    0    0    0   0     0     0     0     1    1     1     1     1    0    0
1    1    1    1   1     1     1     1     1    1     0     0     0    1    1
1    1    1    1   1     1     1     1     0    0     1     1     1    0    0
1    0    0    0   0     0     0     0     1    1     0     0     0    1    1
1    0    0    0   0     1     1     1     1    1     0     0     0    1    1
1    1    1    1   1     0     0     0     0    0     0     0     0    0    0
    10   10   10  10    11    11    11    13   14    15    15    15   16   16
  ycc1 yc1 ycp1 masc1 crop2 crop3 yca2 ycb2 ycc2 yc2 bir2 bir3 prs3 yca3 ycb3
8    1   1    1     1     1     1    1    1    1   1    1    1    1    1    1
2    1   1    1     1     1     1    1    1    1   1    1    1    1    1    1
1    1   1    1     1     1     1    1    1    1   1    1    1    1    0    0
8    1   1    1     1     1     1    1    1    1   1    1    1    0    1    1
1    1   1    1     1     1     1    1    1    1   1    1    1    0    1    1
1    1   1    1     1     0     1    1    1    1   1    1    1    0    1    1
1    0   0    0     1     1     1    1    1    1   1    1    1    1    1    1
1    1   1    1     1     1     1    1    1    1   1    1    1    0    1    1
9    0   0    0     0     0     0    0    0    0   0    0    0    1    0    0
1    1   1    1     1     1     1    1    1    1   1    1    1    0    1    1
1    1   1    1     1     1     1    0    0    0   0    1    1    1    1    1
2    0   0    0     0     0     0    0    0    0   0    0    0    1    0    0
1    1   1    1     1     1     0    1    1    1   1    1    0    0    0    0
1    1   1    1     0     1     0    1    1    1   1    1    0    0    0    0
1    1   1    1     1     1     1    1    1    1   1    1    1    0    1    1
1    1   1    1     1     0     1    0    0    0   0    0    1    0    1    1
1    1   1    1     1     0     0    0    0    0   0    0    0    0    0    0
1    1   1    1     1     0     0    0    0    0   0    0    0    0    0    0
1    0   0    0     0     0     0    0    0    0   0    0    0    0    0    0
1    1   1    1     0     0     0    0    0    0   0    0    0    0    0    0
1    1   1    1     1     1     1    1    1    1   1    1    1    1    1    1
1    1   1    1     1     1     1    1    1    1   1    1    1    1    1    1
1    0   0    0     1     0     0    0    0    0   0    0    0    0    0    0
1    1   1    1     1     1     1    1    1    1   1    0    1    1    0    0
1    0   0    0     0     0     0    0    0    0   0    0    0    1    0    0
1    1   1    1     0     0     0    0    0    0   0    0    0    0    0    0
1    1   1    1     1     0     0    0    0    0   0    0    0    0    0    0
1    0   0    0     0     0     0    0    0    0   0    0    0    1    0    0
    16  16   16    17    22    22   22   22   22  22   22   22   23   24   24
  ycc3 yc3 masc2 masc3    
8    1   1     1     1   0
2    1   1     0     0   2
1    0   0     1     1   4
8    1   1     1     1   1
1    1   1     0     0   3
1    1   1     1     1   2
1    1   1     1     1   5
1    1   1     1     1   4
9    0   0     0     0  22
1    1   1     1     1   7
1    1   1     1     1  10
2    0   0     0     0  28
1    0   0     0     0  14
1    0   0     0     0  15
1    1   1     1     1   9
1    1   1     0     0  15
1    0   0     0     0  29
1    0   0     0     0  32
1    0   0     0     0  39
1    0   0     0     0  37
1    1   1     1     1   6
1    1   1     1     0  13
1    0   0     0     0  40
1    0   0     0     1  10
1    0   0     0     0  23
1    0   0     0     0  40
1    0   0     0     0  36
1    0   0     0     0  30
    24  24    27    27 689
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("fdgs")
> ### * fdgs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fdgs
> ### Title: Fifth Dutch growth study 2009
> ### Aliases: fdgs
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> 
> data <- data(fdgs)
> summary(data)
   Length     Class      Mode 
        1 character character 
> 
> 
> 
> 
> cleanEx()
> nameEx("fix.coef")
> ### * fix.coef
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fix.coef
> ### Title: Fix coefficients and update model
> ### Aliases: fix.coef
> 
> ### ** Examples
> 
> model0 <- lm(Volume ~ Girth + Height, data = trees)
> formula(model0)
Volume ~ Girth + Height
> coef(model0)
(Intercept)       Girth      Height 
-57.9876589   4.7081605   0.3392512 
> deviance(model0)
[1] 421.9214
> 
> # refit same model
> model1 <- fix.coef(model0)
> formula(model1)
Volume ~ 1
> coef(model1)
 (Intercept) 
3.988039e-14 
> deviance(model1)
[1] 421.9214
> 
> # change the beta's
> model2 <- fix.coef(model0, beta = c(-50, 5, 1))
> coef(model2)
(Intercept) 
  -62.07097 
> deviance(model2)
[1] 1098.984
> 
> # compare predictions
> plot(predict(model0), predict(model1)); abline(0,1)
> plot(predict(model0), predict(model2)); abline(0,1)
> 
> # compare proportion explained variance
> cor(predict(model0), predict(model0) + residuals(model0))^2
[1] 0.94795
> cor(predict(model1), predict(model1) + residuals(model1))^2
[1] 0.94795
> cor(predict(model2), predict(model2) + residuals(model2))^2
[1] 0.9228528
> 
> # extract offset from constrained model
> summary(model2$model$offset)
Length  Class   Mode 
     0   NULL   NULL 
> 
> # it also works with factors and missing data
> model0 <- lm(bmi ~ age + hyp + chl, data = nhanes2)
> model1 <- fix.coef(model0)
> model2 <- fix.coef(model0, beta = c(15, -8, -8, 2, 0.2))
> 
> 
> 
> cleanEx()
> nameEx("getfit")
> ### * getfit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getfit
> ### Title: Extract list of fitted model
> ### Aliases: getfit
> ### Keywords: manip
> 
> ### ** Examples
> 
> 
> imp <- mice(nhanes)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> fit <- with(imp, lm(bmi~chl+hyp))
> getfit(fit)
Component 1 :

Call:
lm(formula = bmi ~ chl + hyp)

Coefficients:
(Intercept)          chl          hyp  
   23.66885      0.02904     -2.24542  


Component 2 :

Call:
lm(formula = bmi ~ chl + hyp)

Coefficients:
(Intercept)          chl          hyp  
     21.510        0.031       -1.055  


Component 3 :

Call:
lm(formula = bmi ~ chl + hyp)

Coefficients:
(Intercept)          chl          hyp  
   20.57755      0.04068     -1.90285  


Component 4 :

Call:
lm(formula = bmi ~ chl + hyp)

Coefficients:
(Intercept)          chl          hyp  
   17.66959      0.04705     -0.78804  


Component 5 :

Call:
lm(formula = bmi ~ chl + hyp)

Coefficients:
(Intercept)          chl          hyp  
   21.84638      0.04131     -2.06827  


> getfit(fit, 2)

Call:
lm(formula = bmi ~ chl + hyp)

Coefficients:
(Intercept)          chl          hyp  
     21.510        0.031       -1.055  

> 
> 
> 
> 
> cleanEx()
> nameEx("glm.mids")
> ### * glm.mids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glm.mids
> ### Title: Generalized linear model for 'mids' object
> ### Aliases: glm.mids
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> 
> imp <- mice(nhanes)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> 
> # logistic regression on the imputed data
> fit <- glm.mids((hyp==2)~bmi+chl, data=imp, family = binomial)
> fit
call :
glm.mids(formula = (hyp == 2) ~ bmi + chl, family = binomial, 
    data = imp)

call1 :
mice(data = nhanes)

nmis :
age bmi hyp chl 
  0   9   8  10 

analyses :
[[1]]

Call:  glm(formula = formula, family = family, data = complete(data, 
    i))

Coefficients:
(Intercept)          bmi          chl  
   -4.48630     -0.12513      0.03142  

Degrees of Freedom: 24 Total (i.e. Null);  22 Residual
Null Deviance:	    25.02 
Residual Deviance: 20.32 	AIC: 26.32

[[2]]

Call:  glm(formula = formula, family = family, data = complete(data, 
    i))

Coefficients:
(Intercept)          bmi          chl  
 -11.082490    -0.007844     0.045572  

Degrees of Freedom: 24 Total (i.e. Null);  22 Residual
Null Deviance:	    21.98 
Residual Deviance: 14.39 	AIC: 20.39

[[3]]

Call:  glm(formula = formula, family = family, data = complete(data, 
    i))

Coefficients:
(Intercept)          bmi          chl  
   -4.07180     -0.11037      0.02914  

Degrees of Freedom: 24 Total (i.e. Null);  22 Residual
Null Deviance:	    27.55 
Residual Deviance: 21.91 	AIC: 27.91

[[4]]

Call:  glm(formula = formula, family = family, data = complete(data, 
    i))

Coefficients:
(Intercept)          bmi          chl  
   -3.89002     -0.05464      0.01964  

Degrees of Freedom: 24 Total (i.e. Null);  22 Residual
Null Deviance:	    25.02 
Residual Deviance: 23.31 	AIC: 29.31

[[5]]

Call:  glm(formula = formula, family = family, data = complete(data, 
    i))

Coefficients:
(Intercept)          bmi          chl  
   -3.29891     -0.13523      0.02946  

Degrees of Freedom: 24 Total (i.e. Null);  22 Residual
Null Deviance:	    29.65 
Residual Deviance: 24.6 	AIC: 30.6


> 
> 
> 
> 
> cleanEx()
> nameEx("ibind")
> ### * ibind
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ibind
> ### Title: Enlarge number of imputations by combining 'mids' objects
> ### Aliases: ibind
> ### Keywords: manip
> 
> ### ** Examples
> 
> data(nhanes)
> imp1 <- mice(nhanes, m = 1, maxit = 2, print = FALSE)
> imp1$m
[1] 1
> 
> imp2 <- mice(nhanes, m = 3, maxit = 3, print = FALSE)
> imp2$m
[1] 3
> 
> imp12 <- ibind(imp1, imp2)
> imp12$m
[1] 4
> plot(imp12)
> 
> 
> 
> cleanEx()
> nameEx("ic")
> ### * ic
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ic
> ### Title: Select incomplete cases
> ### Aliases: ic
> ### Keywords: univar
> 
> ### ** Examples
> 
> 
> ic(nhanes)   # get the 12 rows with incomplete cases 
   age  bmi hyp chl
1    1   NA  NA  NA
3    1   NA   1 187
4    3   NA  NA  NA
6    3   NA  NA 184
10   2   NA  NA  NA
11   1   NA  NA  NA
12   2   NA  NA  NA
15   1 29.6   1  NA
16   1   NA  NA  NA
20   3 25.5   2  NA
21   1   NA  NA  NA
24   3 24.9   1  NA
> ic(nhanes[1:10,])  # incomplete cases within the first ten rows
   age bmi hyp chl
1    1  NA  NA  NA
3    1  NA   1 187
4    3  NA  NA  NA
6    3  NA  NA 184
10   2  NA  NA  NA
> ic(nhanes[, c("bmi", "hyp")])  # restrict extraction to variables bmi and hyp
   bmi hyp
1   NA  NA
3   NA   1
4   NA  NA
6   NA  NA
10  NA  NA
11  NA  NA
12  NA  NA
16  NA  NA
21  NA  NA
> 
> 
> 
> 
> cleanEx()
> nameEx("ici")
> ### * ici
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ici
> ### Title: Incomplete case indicator
> ### Aliases: ici ici,data.frame-method ici,matrix-method ici,mids-method
> ### Keywords: univar
> 
> ### ** Examples
> 
> 
>  ici(nhanes) # indicator for 12 rows with incomplete cases 
 [1]  TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE
[13] FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE
[25] FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("lm.mids")
> ### * lm.mids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lm.mids
> ### Title: Linear regression for 'mids' object
> ### Aliases: lm.mids
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> 
> 
> imp <- mice(nhanes)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> fit <- lm.mids(bmi~hyp+chl, data = imp)
> fit
call :
lm.mids(formula = bmi ~ hyp + chl, data = imp)

call1 :
mice(data = nhanes)

nmis :
age bmi hyp chl 
  0   9   8  10 

analyses :
[[1]]

Call:
lm(formula = formula, data = complete(data, i))

Coefficients:
(Intercept)          hyp          chl  
   23.66885     -2.24542      0.02904  


[[2]]

Call:
lm(formula = formula, data = complete(data, i))

Coefficients:
(Intercept)          hyp          chl  
     21.510       -1.055        0.031  


[[3]]

Call:
lm(formula = formula, data = complete(data, i))

Coefficients:
(Intercept)          hyp          chl  
   20.57755     -1.90285      0.04068  


[[4]]

Call:
lm(formula = formula, data = complete(data, i))

Coefficients:
(Intercept)          hyp          chl  
   17.66959     -0.78804      0.04705  


[[5]]

Call:
lm(formula = formula, data = complete(data, i))

Coefficients:
(Intercept)          hyp          chl  
   21.84638     -2.06827      0.04131  



> 
> 
> 
> 
> cleanEx()
> nameEx("make.blocks")
> ### * make.blocks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make.blocks
> ### Title: Creates a 'blocks' argument
> ### Aliases: make.blocks
> 
> ### ** Examples
> 
> make.blocks(nhanes)
$age
[1] "age"

$bmi
[1] "bmi"

$hyp
[1] "hyp"

$chl
[1] "chl"

attr(,"calltype")
   age    bmi    hyp    chl 
"type" "type" "type" "type" 
> make.blocks(c("age", "sex", "edu"))
$age
[1] "age"

$sex
[1] "sex"

$edu
[1] "edu"

attr(,"calltype")
   age    sex    edu 
"type" "type" "type" 
> 
> 
> 
> cleanEx()
> nameEx("make.blots")
> ### * make.blots
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make.blots
> ### Title: Creates a 'blots' argument
> ### Aliases: make.blots
> 
> ### ** Examples
> 
> make.predictorMatrix(nhanes)
    age bmi hyp chl
age   0   1   1   1
bmi   1   0   1   1
hyp   1   1   0   1
chl   1   1   1   0
> make.blots(nhanes, blocks = name.blocks(c("age", "hyp"), "xxx"))
$age
list()

$hyp
list()

> 
> 
> 
> cleanEx()
> nameEx("make.formulas")
> ### * make.formulas
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make.formulas
> ### Title: Creates a 'formulas' argument
> ### Aliases: make.formulas
> 
> ### ** Examples
> 
> f1 <- make.formulas(nhanes)
> f1
$age
age ~ 0 + bmi + hyp + chl
<environment: 0x7ff450a74ac0>

$bmi
bmi ~ 0 + age + hyp + chl
<environment: 0x7ff450a74ac0>

$hyp
hyp ~ 0 + age + bmi + chl
<environment: 0x7ff450a74ac0>

$chl
chl ~ 0 + age + bmi + hyp
<environment: 0x7ff450a74ac0>

> f2 <- make.formulas(nhanes, blocks = make.blocks(nhanes, "collect"))
> f2
$collect
age + bmi + hyp + chl ~ 0
<environment: 0x7ff450ad6fc8>

> 
> # for editing, it may be easier to work with the character vector
> c1 <- as.character(f1)
> c1
[1] "age ~ 0 + bmi + hyp + chl" "bmi ~ 0 + age + hyp + chl"
[3] "hyp ~ 0 + age + bmi + chl" "chl ~ 0 + age + bmi + hyp"
> 
> # fold it back into a formula list
> f3 <- name.formulas(lapply(c1, as.formula))
> f3
$age
age ~ 0 + bmi + hyp + chl
<environment: 0x7ff450ae6008>

$bmi
bmi ~ 0 + age + hyp + chl
<environment: 0x7ff450ae6008>

$hyp
hyp ~ 0 + age + bmi + chl
<environment: 0x7ff450ae6008>

$chl
chl ~ 0 + age + bmi + hyp
<environment: 0x7ff450ae6008>

> 
> 
> 
> 
> cleanEx()
> nameEx("make.method")
> ### * make.method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make.method
> ### Title: Creates a 'method' argument
> ### Aliases: make.method
> 
> ### ** Examples
> 
> make.method(nhanes2)
     age      bmi      hyp      chl 
      ""    "pmm" "logreg"    "pmm" 
> 
> 
> 
> cleanEx()
> nameEx("make.post")
> ### * make.post
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make.post
> ### Title: Creates a 'post' argument
> ### Aliases: make.post
> 
> ### ** Examples
> 
> make.post(nhanes2)
age bmi hyp chl 
 ""  ""  ""  "" 
> 
> 
> 
> cleanEx()
> nameEx("make.predictorMatrix")
> ### * make.predictorMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make.predictorMatrix
> ### Title: Creates a 'predictorMatrix' argument
> ### Aliases: make.predictorMatrix
> 
> ### ** Examples
> 
> make.predictorMatrix(nhanes)
    age bmi hyp chl
age   0   1   1   1
bmi   1   0   1   1
hyp   1   1   0   1
chl   1   1   1   0
> make.predictorMatrix(nhanes, blocks = make.blocks(nhanes, "collect"))
        age bmi hyp chl
collect   1   1   1   1
> 
> 
> 
> cleanEx()
> nameEx("make.visitSequence")
> ### * make.visitSequence
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make.visitSequence
> ### Title: Creates a 'visitSequence' argument
> ### Aliases: make.visitSequence
> 
> ### ** Examples
> 
> make.visitSequence(nhanes)
[1] "age" "bmi" "hyp" "chl"
> 
> 
> 
> cleanEx()
> nameEx("make.where")
> ### * make.where
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make.where
> ### Title: Creates a 'where' argument
> ### Aliases: make.where
> 
> ### ** Examples
> 
> head(make.where(nhanes), 3)
    age   bmi   hyp   chl
1 FALSE  TRUE  TRUE  TRUE
2 FALSE FALSE FALSE FALSE
3 FALSE  TRUE FALSE FALSE
> 
> 
> 
> cleanEx()
> nameEx("mammalsleep")
> ### * mammalsleep
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mammalsleep
> ### Title: Mammal sleep data
> ### Aliases: mammalsleep sleep
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> 
> sleep <- data(mammalsleep)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("md.pairs")
> ### * md.pairs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: md.pairs
> ### Title: Missing data pattern by variable pairs
> ### Aliases: md.pairs
> ### Keywords: univar
> 
> ### ** Examples
> 
> 
> 
> pat <- md.pairs(nhanes)
> pat
$rr
    age bmi hyp chl
age  25  16  17  15
bmi  16  16  16  13
hyp  17  16  17  14
chl  15  13  14  15

$rm
    age bmi hyp chl
age   0   9   8  10
bmi   0   0   0   3
hyp   0   1   0   3
chl   0   2   1   0

$mr
    age bmi hyp chl
age   0   0   0   0
bmi   9   0   1   2
hyp   8   0   0   1
chl  10   3   3   0

$mm
    age bmi hyp chl
age   0   0   0   0
bmi   0   9   8   7
hyp   0   8   8   7
chl   0   7   7  10

> 
> # show that these four matrices decompose the total sample size
> # for each pair
> pat$rr + pat$rm + pat$mr + pat$mm
    age bmi hyp chl
age  25  25  25  25
bmi  25  25  25  25
hyp  25  25  25  25
chl  25  25  25  25
> 
> # percentage of usable cases to impute row variable from column variable
> round(100*pat$mr/(pat$mr+pat$mm))
    age bmi hyp chl
age NaN NaN NaN NaN
bmi 100   0  11  22
hyp 100   0   0  12
chl 100  30  30   0
> 
> 
> 
> 
> cleanEx()
> nameEx("md.pattern")
> ### * md.pattern
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: md.pattern
> ### Title: Missing data pattern
> ### Aliases: md.pattern
> ### Keywords: univar
> 
> ### ** Examples
> 
> 
> 
> md.pattern(nhanes)
   age hyp bmi chl   
13   1   1   1   1  0
3    1   1   1   0  1
1    1   1   0   1  1
1    1   0   0   1  2
7    1   0   0   0  3
     0   8   9  10 27
> #     age hyp bmi chl
> #  13   1   1   1   1  0
> #   1   1   1   0   1  1
> #   3   1   1   1   0  1
> #   1   1   0   0   1  2
> #   7   1   0   0   0  3
> #   0   8   9  10 27
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("mdc")
> ### * mdc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mdc
> ### Title: Graphical parameter for missing data plots.
> ### Aliases: mdc
> ### Keywords: hplot
> 
> ### ** Examples
> 
> 
> # all six colors
> mdc(1:6)
[1] "#006CC2B3" "#B61A51B3" "gray50"    "#006CC2CC" "#B61A51CC" "gray50"   
> 
> # lines color for observed and missing data
> mdc(c('obs','mis'), 'lin')
[1] "#006CC2CC" "#B61A51CC"
> 
> 
> 
> 
> cleanEx()
> nameEx("mice")
> ### * mice
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice
> ### Title: 'mice': Multivariate Imputation by Chained Equations
> ### Aliases: mice mice-package
> ### Keywords: iteration
> 
> ### ** Examples
> 
> 
> 
> # do default multiple imputation on a numeric matrix
> imp <- mice(nhanes)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> imp
Class: mids
Number of multiple imputations:  5 
Imputation methods:
  age   bmi   hyp   chl 
   "" "pmm" "pmm" "pmm" 
PredictorMatrix:
    age bmi hyp chl
age   0   1   1   1
bmi   1   0   1   1
hyp   1   1   0   1
chl   1   1   1   0
> 
> # list the actual imputations for BMI
> imp$imp$bmi
      1    2    3    4    5
1  25.5 28.7 22.0 27.5 33.2
3  28.7 22.0 27.2 27.4 28.7
4  24.9 25.5 22.5 22.5 27.5
6  25.5 27.5 24.9 22.5 26.3
10 28.7 22.5 22.7 20.4 27.5
11 28.7 27.2 22.5 28.7 27.2
12 20.4 27.4 22.5 20.4 27.2
16 27.2 22.0 30.1 27.5 33.2
21 30.1 27.5 27.2 22.7 30.1
> 
> # first completed data matrix
> complete(imp)
   age  bmi hyp chl
1    1 25.5   1 187
2    2 22.7   1 187
3    1 28.7   1 187
4    3 24.9   1 199
5    1 20.4   1 113
6    3 25.5   1 184
7    1 22.5   1 118
8    1 30.1   1 187
9    2 22.0   1 238
10   2 28.7   1 206
11   1 28.7   1 238
12   2 20.4   2 238
13   3 21.7   1 206
14   2 28.7   2 204
15   1 29.6   1 187
16   1 27.2   1 131
17   3 27.2   2 284
18   2 26.3   2 199
19   1 35.3   1 218
20   3 25.5   2 184
21   1 30.1   1 187
22   1 33.2   1 229
23   1 27.5   1 131
24   3 24.9   1 204
25   2 27.4   1 186
> 
> 
> # imputation on mixed data with a different method per column
> 
> mice(nhanes2, meth=c('sample','pmm','logreg','norm'))

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
Class: mids
Number of multiple imputations:  5 
Imputation methods:
     age      bmi      hyp      chl 
      ""    "pmm" "logreg"   "norm" 
PredictorMatrix:
    age bmi hyp chl
age   0   1   1   1
bmi   1   0   1   1
hyp   1   1   0   1
chl   1   1   1   0
> 
> 
> 
> 
> cleanEx()
> nameEx("mice.impute.2l.bin")
> ### * mice.impute.2l.bin
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.impute.2l.bin
> ### Title: Imputation by a two-level logistic model using 'glmer'
> ### Aliases: mice.impute.2l.bin
> ### Keywords: datagen
> 
> ### ** Examples
> 
> library(tidyr)

Attaching package: ‘tidyr’

The following object is masked from ‘package:mice’:

    complete

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> data("toenail", package = "HSAUR3")
> data <- tidyr::complete(toenail, patientID, visit) %>% 
+  tidyr::fill(treatment) %>% 
+  dplyr::select(-time) %>%
+  dplyr::mutate(patientID = as.integer(patientID))
> 
> ## Not run: 
> ##D pred <- mice(data, print = FALSE, maxit = 0, seed = 1)$pred
> ##D pred["outcome", "patientID"] <- -2
> ##D imp <- mice(data, method = "2l.bin", pred = pred, maxit = 1, m = 1, seed = 1)
> ## End(Not run)
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’, ‘package:tidyr’

> nameEx("mice.impute.2l.pan")
> ### * mice.impute.2l.pan
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.impute.2l.pan
> ### Title: Imputation by a two-level normal model using 'pan'
> ### Aliases: mice.impute.2l.pan 2l.pan
> 
> ### ** Examples
> 
> 
> ###################################
> # simulate some data
> # two-level regression model with fixed slope
> 
> # number of groups
> G <- 250
> # number of persons
> n <- 20
> # regression parameter
> beta <- .3
> # intraclass correlation
> rho <- .30
> # correlation with missing response
> rho.miss <- .10
> # missing proportion
> missrate <- .50
> y1 <- rep( rnorm( G , sd = sqrt( rho ) ) , each=n ) + rnorm(G*n , sd = sqrt( 1 - rho )) 
> x <-  rnorm( G*n )
> y <- y1 + beta  * x
> dfr0 <- dfr <- data.frame( "group" = rep(1:G , each=n ) , "x" = x , "y" = y )
> dfr[ rho.miss * x + rnorm( G*n , sd = sqrt( 1 - rho.miss ) ) < qnorm( missrate ) , "y" ] <- NA
> 
> #.....
> # empty imputation in mice
> imp0 <- mice( as.matrix(dfr)  , maxit=0 )
> predM <- imp0$predictorMatrix
> impM <- imp0$method
> 
> #...
> # specify predictor matrix and imputationMethod
> predM1 <- predM
> predM1["y","group"] <- -2
> predM1["y","x"] <- 1        # fixed x effects imputation
> impM1 <- impM
> impM1["y"] <- "2l.pan"
> 
> # multilevel imputation
> imp1 <- mice( as.matrix( dfr ) , m = 1 , predictorMatrix = predM1 , 
+            imputationMethod = impM1 , maxit=1 )
Warning in check.deprecated(...) :
  The 'imputationMethod' argument is no longer supported. Please use 'method' instead.

 iter imp variable
  1   1  y
> # multilevel analysis
> library(lme4)
Loading required package: Matrix
> mod <- lmer( y ~ ( 1 + x | group) + x , data = complete(imp1) )
boundary (singular) fit: see ?isSingular
> summary(mod)
Linear mixed model fit by REML ['lmerMod']
Formula: y ~ (1 + x | group) + x
   Data: complete(imp1)

REML criterion at convergence: 14109.6

Scaled residuals: 
    Min      1Q  Median      3Q     Max 
-3.5818 -0.6426 -0.0173  0.6686  3.2703 

Random effects:
 Groups   Name        Variance Std.Dev. Corr
 group    (Intercept) 0.066800 0.2585       
          x           0.002107 0.0459   1.00
 Residual             0.938848 0.9689       
Number of obs: 5000, groups:  group, 250

Fixed effects:
            Estimate Std. Error t value
(Intercept)  0.06099    0.02133   2.859
x            0.28179    0.01427  19.743

Correlation of Fixed Effects:
  (Intr)
x 0.164 
convergence code: 0
boundary (singular) fit: see ?isSingular

> 
> ############################################
> # Examples of predictorMatrix specification
> 
> # random x effects
> # predM1["y","x"] <- 2
> 
> # fixed x effects and group mean of x
> # predM1["y","x"] <- 3        
> 
> # random x effects and group mean of x
> # predM1["y","x"] <- 4        
> 
> 
> 
> 
> cleanEx()

detaching ‘package:lme4’, ‘package:Matrix’

> nameEx("mice.impute.2lonly.norm")
> ### * mice.impute.2lonly.norm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.impute.2lonly.norm
> ### Title: Imputation at level 2 by Bayesian linear regression
> ### Aliases: mice.impute.2lonly.norm 2lonly.norm
> 
> ### ** Examples
> 
> 
> ##################################################
> # simulate some data
> # x,y ... level 1 variables
> # v,w ... level 2 variables
> 
> G <- 250            # number of groups
> n <- 20             # number of persons
> beta <- .3          # regression coefficient
> rho <- .30          # residual intraclass correlation
> rho.miss <- .10     # correlation with missing response
> missrate <- .50     # missing proportion
> y1 <- rep( rnorm( G , sd = sqrt( rho ) ) , each=n ) + rnorm(G*n , sd = sqrt( 1 - rho )) 
> w <- rep( round( rnorm(G ) , 2 ) , each=n )
> v <- rep( round( runif( G , 0 , 3 ) ) , each=n )
> x <-  rnorm( G*n ) 
> y <- y1 + beta  * x + .2 * w + .1 * v
> dfr0 <- dfr <- data.frame( "group" = rep(1:G , each=n ) , "x" = x , "y" = y , "w" = w , "v" = v )
> dfr[ rho.miss * x + rnorm( G*n , sd = sqrt( 1 - rho.miss ) ) < qnorm( missrate ) , "y" ] <- NA
> dfr[ rep( rnorm(G) , each=n ) < qnorm( missrate ) , "w" ] <- NA
> dfr[ rep( rnorm(G) , each=n ) < qnorm( missrate ) , "v" ] <- NA
> 
> #....
> # empty mice imputation
> imp0 <- mice( as.matrix(dfr)  , maxit=0 )
> predM <- imp0$predictorMatrix
> impM <- imp0$method
> 
> #...
> # multilevel imputation
> predM1 <- predM
> predM1[c("w","y","v"),"group"] <- -2
> predM1["y","x"] <- 1        # fixed x effects imputation
> impM1 <- impM
> impM1[c("y","w","v")] <- c("2l.pan" , "2lonly.norm" , "2lonly.pmm" )
> 
> # y ... imputation using pan
> # w ... imputation at level 2 using norm
> # v ... imputation at level 2 using pmm
> 
> imp1 <- mice( as.matrix( dfr ) , m = 1 , predictorMatrix = predM1 , 
+            imputationMethod = impM1 , maxit=1 , paniter=500)
Warning in check.deprecated(...) :
  The 'imputationMethod' argument is no longer supported. Please use 'method' instead.

 iter imp variable
  1   1  y  w  v
>    
> 
> 
> 
> cleanEx()
> nameEx("mice.impute.2lonly.pmm")
> ### * mice.impute.2lonly.pmm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.impute.2lonly.pmm
> ### Title: Imputation at level 2 by predictive mean matching
> ### Aliases: mice.impute.2lonly.pmm 2lonly.pmm
> 
> ### ** Examples
> 
> 
> ##################################################
> # simulate some data
> # x,y ... level 1 variables
> # v,w ... level 2 variables
> 
> G <- 250            # number of groups
> n <- 20             # number of persons
> beta <- .3          # regression coefficient
> rho <- .30          # residual intraclass correlation
> rho.miss <- .10     # correlation with missing response
> missrate <- .50     # missing proportion
> y1 <- rep( rnorm( G , sd = sqrt( rho ) ) , each=n ) + rnorm(G*n , sd = sqrt( 1 - rho )) 
> w <- rep( round( rnorm(G ) , 2 ) , each=n )
> v <- rep( round( runif( G , 0 , 3 ) ) , each=n )
> x <-  rnorm( G*n ) 
> y <- y1 + beta  * x + .2 * w + .1 * v
> dfr0 <- dfr <- data.frame( "group" = rep(1:G , each=n ) , "x" = x , "y" = y , "w" = w , "v" = v )
> dfr[ rho.miss * x + rnorm( G*n , sd = sqrt( 1 - rho.miss ) ) < qnorm( missrate ) , "y" ] <- NA
> dfr[ rep( rnorm(G) , each=n ) < qnorm( missrate ) , "w" ] <- NA
> dfr[ rep( rnorm(G) , each=n ) < qnorm( missrate ) , "v" ] <- NA
> 
> #....
> # empty mice imputation
> imp0 <- mice( as.matrix(dfr)  , maxit=0 )
> predM <- imp0$predictorMatrix
> impM <- imp0$method
> 
> #...
> # multilevel imputation
> predM1 <- predM
> predM1[c("w","y","v"),"group"] <- -2
> predM1["y","x"] <- 1        # fixed x effects imputation
> impM1 <- impM
> impM1[c("y","w","v")] <- c("2l.pan" , "2lonly.norm" , "2lonly.pmm" )
> 
> # turn v into a categorical variable
> dfr$v <- as.factor(dfr$v)
> levels(dfr$v) <- LETTERS[1:4]
> 
> # y ... imputation using pan
> # w ... imputation at level 2 using norm
> # v ... imputation at level 2 using pmm
> 
> imp <- mice(dfr, m = 1, predictorMatrix = predM1 , 
+            imputationMethod = impM1, maxit = 1, paniter = 500)
Warning in check.deprecated(...) :
  The 'imputationMethod' argument is no longer supported. Please use 'method' instead.

 iter imp variable
  1   1  y  w  v
> 
> 
> 
> 
> cleanEx()
> nameEx("mice.impute.cart")
> ### * mice.impute.cart
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.impute.cart
> ### Title: Imputation by classification and regression trees
> ### Aliases: mice.impute.cart cart
> ### Keywords: datagen
> 
> ### ** Examples
> 
> require(rpart)
Loading required package: rpart
> 
> imp <- mice(nhanes2, meth = 'cart', minbucket = 4)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> plot(imp)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:rpart’

> nameEx("mice.impute.jomoImpute")
> ### * mice.impute.jomoImpute
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.impute.jomoImpute
> ### Title: Multivariate multilevel imputation using 'jomo'
> ### Aliases: mice.impute.jomoImpute
> ### Keywords: datagen
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("mice.impute.midastouch")
> ### * mice.impute.midastouch
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.impute.midastouch
> ### Title: Imputation by predictive mean matching with distance aided donor
> ###   selection
> ### Aliases: mice.impute.midastouch
> ### Keywords: datagen
> 
> ### ** Examples
> 
> # do default multiple imputation on a numeric matrix
> imp <- mice(nhanes, method = 'midastouch')

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> imp
Class: mids
Number of multiple imputations:  5 
Imputation methods:
         age          bmi          hyp          chl 
          "" "midastouch" "midastouch" "midastouch" 
PredictorMatrix:
    age bmi hyp chl
age   0   1   1   1
bmi   1   0   1   1
hyp   1   1   0   1
chl   1   1   1   0
> 
> # list the actual imputations for BMI
> imp$imp$bmi
      1    2    3    4    5
1  29.6 30.1 29.6 29.6 33.2
3  29.6 30.1 29.6 29.6 30.1
4  24.9 20.4 21.7 25.5 25.5
6  24.9 21.7 21.7 25.5 25.5
10 22.7 33.2 22.5 20.4 27.4
11 22.7 30.1 29.6 29.6 29.6
12 29.6 24.9 26.3 22.0 27.4
16 33.2 30.1 29.6 29.6 33.2
21 29.6 30.1 29.6 22.5 33.2
> 
> # first completed data matrix
> complete(imp)
   age  bmi hyp chl
1    1 29.6   1 187
2    2 22.7   1 187
3    1 29.6   1 187
4    3 24.9   1 284
5    1 20.4   1 113
6    3 24.9   2 184
7    1 22.5   1 118
8    1 30.1   1 187
9    2 22.0   1 238
10   2 22.7   1 187
11   1 22.7   1 118
12   2 29.6   2 229
13   3 21.7   1 206
14   2 28.7   2 204
15   1 29.6   1 187
16   1 33.2   1 229
17   3 27.2   2 284
18   2 26.3   2 199
19   1 35.3   1 218
20   3 25.5   2 229
21   1 29.6   1 187
22   1 33.2   1 229
23   1 27.5   1 131
24   3 24.9   1 284
25   2 27.4   1 186
> 
> # imputation on mixed data with a different method per column
> mice(nhanes2, method = c('sample', 'midastouch', 'logreg', 'norm'))

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
Class: mids
Number of multiple imputations:  5 
Imputation methods:
         age          bmi          hyp          chl 
          "" "midastouch"     "logreg"       "norm" 
PredictorMatrix:
    age bmi hyp chl
age   0   1   1   1
bmi   1   0   1   1
hyp   1   1   0   1
chl   1   1   1   0
> 
> 
> 
> cleanEx()
> nameEx("mice.impute.panImpute")
> ### * mice.impute.panImpute
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.impute.panImpute
> ### Title: Impute multilevel missing data using 'pan'
> ### Aliases: mice.impute.panImpute
> ### Keywords: datagen
> 
> ### ** Examples
> 
> blocks <-  list(c("bmi", "chl", "hyp"), "age")
> method <- c("panImpute", "pmm")
> ini <- mice(nhanes, blocks = blocks, method = method, maxit = 0)
> pred <- ini$pred
> pred["B1", "hyp"] <- -2
> imp <- mice(nhanes, blocks = blocks, method = method, pred = pred, maxit = 1)

 iter imp variable
  1   1  bmi chl hyp
  1   2  bmi chl hyp
  1   3  bmi chl hyp
  1   4  bmi chl hyp
  1   5  bmi chl hyp
> 
> 
> 
> 
> cleanEx()
> nameEx("mice.impute.pmm")
> ### * mice.impute.pmm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.impute.pmm
> ### Title: Imputation by predictive mean matching
> ### Aliases: mice.impute.pmm pmm
> ### Keywords: datagen
> 
> ### ** Examples
> 
> # We normally call mice.impute.pmm() from within mice()
> # But we may call it directly as follows (not recommended)
> 
> set.seed(53177)
> xname <- c('age', 'hgt', 'wgt')
> r <- stats::complete.cases(boys[, xname])
> x <- boys[r, xname]
> y <- boys[r, 'tv']
> ry <- !is.na(y)
> table(ry)
ry
FALSE  TRUE 
  503   224 
> 
> # percentage of missing data in tv
> sum(!ry) / length(ry)
[1] 0.6918845
> 
> # Impute missing tv data
> yimp <- mice.impute.pmm(y, ry, x)
> length(yimp)
[1] 503
> hist(yimp, xlab = 'Imputed missing tv')
> 
> # Impute all tv data
> yimp <- mice.impute.pmm(y, ry, x, wy = rep(TRUE, length(y)))
> length(yimp)
[1] 727
> hist(yimp, xlab = 'Imputed missing and observed tv')
> plot(jitter(y), jitter(yimp), 
+     main = 'Predictive mean matching on age, height and weight', 
+     xlab = 'Observed tv (n = 224)',
+     ylab = 'Imputed tv (n = 224)')
> abline(0, 1)
> cor(y, yimp, use = 'pair')
[1] 0.7687127
> 
> 
> 
> cleanEx()
> nameEx("mice.impute.quadratic")
> ### * mice.impute.quadratic
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.impute.quadratic
> ### Title: Imputation of quadratic terms
> ### Aliases: mice.impute.quadratic quadratic
> ### Keywords: datagen
> 
> ### ** Examples
> 
> require(lattice)
> 
> # Create Data
> B1 = .5
> B2 = .5
> X <- rnorm(1000)
> XX <- X^2
> e <- rnorm(1000, 0, 1)
> Y <- B1 * X + B2 * XX + e
> dat <- data.frame(x = X, xx = XX, y = Y)
> 
> # Impose 25 percent MCAR Missingness
> dat[0 == rbinom(1000, 1, 1 -.25), 1:2] <- NA
> 
> # Prepare data for imputation
> ini <- mice(dat, maxit = 0)
> meth <- c("quadratic", "~I(x^2)", "")
> pred <- ini$pred
> pred[, "xx"] <- 0
> 
> # Impute data
> imp <- mice(dat, meth = meth, pred = pred)

 iter imp variable
  1   1  x  xx
  1   2  x  xx
  1   3  x  xx
  1   4  x  xx
  1   5  x  xx
  2   1  x  xx
  2   2  x  xx
  2   3  x  xx
  2   4  x  xx
  2   5  x  xx
  3   1  x  xx
  3   2  x  xx
  3   3  x  xx
  3   4  x  xx
  3   5  x  xx
  4   1  x  xx
  4   2  x  xx
  4   3  x  xx
  4   4  x  xx
  4   5  x  xx
  5   1  x  xx
  5   2  x  xx
  5   3  x  xx
  5   4  x  xx
  5   5  x  xx
> 
> # Pool results
> pool(with(imp, lm(y ~ x + xx)))
Class: mipo    m = 5 
               estimate         ubar            b            t dfcom        df
(Intercept) -0.03306517 0.0016683589 4.667224e-04 0.0022284258   997  58.36381
x            0.51105692 0.0010398442 2.810172e-05 0.0010735662   997 778.64731
xx           0.52297773 0.0004876003 1.659044e-04 0.0006866856   997  44.58500
                   riv     lambda        fmi
(Intercept) 0.33569927 0.25132848 0.27572956
x           0.03242992 0.03141126 0.03388958
xx          0.40829618 0.28992210 0.31976671
> 
> # Plot results
> stripplot(imp)
> plot(dat$x, dat$xx, col = mdc(1), xlab = "x", ylab = "xx")
> cmp <- complete(imp)
> points(cmp$x[is.na(dat$x)], cmp$xx[is.na(dat$x)], col = mdc(2))
> 
> 
> 
> cleanEx()
> nameEx("mice.impute.rf")
> ### * mice.impute.rf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.impute.rf
> ### Title: Imputation by random forests
> ### Aliases: mice.impute.rf
> ### Keywords: datagen
> 
> ### ** Examples
> 
> library("lattice")
> 
> imp <- mice(nhanes2, meth = "rf", ntree = 3)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> plot(imp)
> 
> 
> 
> 
> cleanEx()
> nameEx("mice.mids")
> ### * mice.mids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mice.mids
> ### Title: Multivariate Imputation by Chained Equations (Iteration Step)
> ### Aliases: mice.mids
> ### Keywords: iteration
> 
> ### ** Examples
> 
> 
> imp1 <- mice(nhanes, maxit=1, seed = 123)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
> imp2 <- mice.mids(imp1)

 iter imp variable
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
> 
> # yields the same result as
> imp <- mice(nhanes, maxit=2, seed = 123)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
> 
> # verification
> identical(imp$imp, imp2$imp)
[1] TRUE
> # 
> 
> 
> 
> cleanEx()
> nameEx("name.blocks")
> ### * name.blocks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: name.blocks
> ### Title: Name imputation blocks
> ### Aliases: name.blocks
> 
> ### ** Examples
> 
> blocks <- list(c("hyp", "chl"), AGE = "age", c("bmi", "hyp"), "edu")
> name.blocks(blocks)
$B1
[1] "hyp" "chl"

$AGE
[1] "age"

$B2
[1] "bmi" "hyp"

$edu
[1] "edu"

> 
> 
> 
> cleanEx()
> nameEx("name.formulas")
> ### * name.formulas
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: name.formulas
> ### Title: Name formula list elements
> ### Aliases: name.formulas
> 
> ### ** Examples
> 
> # fully conditionally specified main effects model
> form1 <- list(bmi ~ age + chl + hyp, 
+               hyp ~ age + bmi + chl,
+               chl ~ age + bmi + hyp)
> form1 <- name.formulas(form1)
> imp1 <- mice(nhanes, formulas = form1, print = FALSE, m = 1, seed = 12199)
> 
> # same model using dot notation
> form2 <- list(bmi ~ ., hyp ~ ., chl ~ .)
> form2 <- name.formulas(form2)
> imp2 <- mice(nhanes, formulas = form2, print = FALSE, m = 1, seed = 12199)
> identical(complete(imp1), complete(imp2))
[1] FALSE
> 
> # same model using repeated multivariate imputation
> form3 <- name.blocks(list(all = bmi + hyp + chl ~ .))
> imp3 <- mice(nhanes, formulas = form3, print = FALSE, m = 1, seed = 12199)
> cmp3 <- complete(imp3)
> identical(complete(imp1), complete(imp3))
[1] FALSE
> 
> # same model using predictorMatrix
> imp4 <- mice(nhanes, print = FALSE, m = 1, seed = 12199, auxiliary = TRUE)
> identical(complete(imp1), complete(imp4))
[1] FALSE
> 
> # different model: multivariate imputation for chl and bmi
> form5 <- list(chl + bmi ~ ., hyp ~ bmi + age)
> form5 <- name.formulas(form5)
> imp5 <- mice(nhanes, formulas = form5, print = FALSE, m = 1, seed = 71712)
> 
> 
> 
> cleanEx()
> nameEx("ncc")
> ### * ncc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ncc
> ### Title: Number of complete cases
> ### Aliases: ncc
> 
> ### ** Examples
> 
> 
>  ncc(nhanes) # 13 complete cases 
[1] 13
> 
> 
> 
> 
> cleanEx()
> nameEx("nelsonaalen")
> ### * nelsonaalen
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nelsonaalen
> ### Title: Cumulative hazard rate or Nelson-Aalen estimator
> ### Aliases: nelsonaalen hazard
> ### Keywords: misc
> 
> ### ** Examples
> 
> require(MASS)
Loading required package: MASS
> 
> leuk$status <- 1  ## no censoring occurs in leuk data (MASS)
> ch <- nelsonaalen(leuk, time, status)
> plot(x = leuk$time, y = ch, ylab='Cumulative hazard', xlab='Time')
> 
> ### See example on http://www.engineeredsoftware.com/lmar/pe_cum_hazard_function.htm
> time <- c(43, 67, 92, 94, 149, rep(149,7))
> status <- c(rep(1,5),rep(0,7))
> eng <- data.frame(time, status)
> ch <- nelsonaalen(eng, time, status)
> plot(x = time, y = ch, ylab='Cumulative hazard', xlab='Time')
> 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’

> nameEx("nhanes")
> ### * nhanes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nhanes
> ### Title: NHANES example - all variables numerical
> ### Aliases: nhanes
> ### Keywords: datasets
> 
> ### ** Examples
> 
>  
> 
> imp <- mice(nhanes)     # create 5 imputed data sets

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> complete(imp)           # print the first imputed data set
   age  bmi hyp chl
1    1 25.5   1 187
2    2 22.7   1 187
3    1 28.7   1 187
4    3 24.9   1 199
5    1 20.4   1 113
6    3 25.5   1 184
7    1 22.5   1 118
8    1 30.1   1 187
9    2 22.0   1 238
10   2 28.7   1 206
11   1 28.7   1 238
12   2 20.4   2 238
13   3 21.7   1 206
14   2 28.7   2 204
15   1 29.6   1 187
16   1 27.2   1 131
17   3 27.2   2 284
18   2 26.3   2 199
19   1 35.3   1 218
20   3 25.5   2 184
21   1 30.1   1 187
22   1 33.2   1 229
23   1 27.5   1 131
24   3 24.9   1 204
25   2 27.4   1 186
> 
> 
> 
> 
> cleanEx()
> nameEx("nhanes2")
> ### * nhanes2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nhanes2
> ### Title: NHANES example - mixed numerical and discrete variables
> ### Aliases: nhanes2
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> 
> imp <- mice(nhanes2)     # create 5 imputed data sets

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> complete(imp)           # print the first imputed data set
     age  bmi hyp chl
1  20-39 28.7  no 238
2  40-59 22.7  no 187
3  20-39 30.1  no 187
4  60-99 27.5 yes 204
5  20-39 20.4  no 113
6  60-99 24.9  no 184
7  20-39 22.5  no 118
8  20-39 30.1  no 187
9  40-59 22.0  no 238
10 40-59 26.3  no 218
11 20-39 33.2  no 187
12 40-59 29.6 yes 284
13 60-99 21.7  no 206
14 40-59 28.7 yes 204
15 20-39 29.6  no 187
16 20-39 28.7  no 118
17 60-99 27.2 yes 284
18 40-59 26.3 yes 199
19 20-39 35.3  no 218
20 60-99 25.5 yes 206
21 20-39 30.1  no 238
22 20-39 33.2  no 229
23 20-39 27.5  no 131
24 60-99 24.9  no 187
25 40-59 27.4  no 186
> 
> 
> 
> 
> cleanEx()
> nameEx("nic")
> ### * nic
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nic
> ### Title: Number of incomplete cases
> ### Aliases: nic
> 
> ### ** Examples
> 
> 
>  nic(nhanes) # the remaining 12 rows 
[1] 12
>  nic(nhanes[,c("bmi","hyp")]) # number of cases with incomplete bmi and hyp
[1] 9
> 
> 
> 
> 
> cleanEx()
> nameEx("nimp")
> ### * nimp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nimp
> ### Title: Number of imputations per block
> ### Aliases: nimp
> 
> ### ** Examples
> 
> where <- is.na(nhanes)
> 
> # standard FCS
> nimp(where)
age bmi hyp chl 
  0   9   8  10 
> 
> # user-defined blocks
> nimp(where, blocks = name.blocks(list(c("bmi", "hyp"), "age", "chl")))
 B1 age chl 
 17   0  10 
> 
> 
> 
> cleanEx()
> nameEx("parlmice")
> ### * parlmice
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: parlmice
> ### Title: Wrapper function that runs MICE in parallel
> ### Aliases: parlmice
> 
> ### ** Examples
> 
> # 150 imputations in dataset nhanes, performed by 3 cores  
> ## Not run: 
> ##D imp1 <- parlmice(data = nhanes, n.core = 3, n.imp.core = 50)
> ##D # Making use of arguments in mice. 
> ##D imp2 <- parlmice(data = nhanes, method = "norm.nob", m = 100)
> ##D imp2$method
> ##D fit <- with(imp2, lm(bmi ~ hyp))
> ##D pool(fit)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("pattern")
> ### * pattern
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pattern
> ### Title: Datasets with various missing data patterns
> ### Aliases: pattern pattern1 pattern2 pattern3 pattern4
> ### Keywords: datasets
> 
> ### ** Examples
> 
> require(lattice)
> require(MASS)
Loading required package: MASS
> 
> pattern4
    A  B  C
25 26 88 32
26 42 66 21
27 86 54 NA
28  9 92 NA
29 20 83 NA
30 89 NA 41
31 NA NA 35
32 NA NA 33
> 
> data <- rbind(pattern1, pattern2, pattern3, pattern4)
> mdpat <- cbind(expand.grid(rec = 8:1, pat = 1:4, var = 1:3), r=as.numeric(as.vector(is.na(data))))
> 
> types <-  c("Univariate","Monotone","File matching","General")
> tp41 <- levelplot(r~var+rec|as.factor(pat), data=mdpat,
+          as.table=TRUE, aspect="iso",
+          shrink=c(0.9), 
+          col.regions = mdc(1:2),
+          colorkey=FALSE,
+          scales=list(draw=FALSE),
+          xlab="", ylab="",
+          between = list(x=1,y=0),
+          strip = strip.custom(bg = "grey95", style = 1,
+            factor.levels = types))
> print(tp41)
> 
> md.pattern(pattern4)
  A B C  
2 1 1 1 0
3 1 1 0 1
1 1 0 1 1
2 0 0 1 2
  2 3 3 8
> p <- md.pairs(pattern4)
> p
$rr
  A B C
A 6 5 3
B 5 5 2
C 3 2 5

$rm
  A B C
A 0 1 3
B 0 0 3
C 2 3 0

$mr
  A B C
A 0 0 2
B 1 0 3
C 3 3 0

$mm
  A B C
A 2 2 0
B 2 3 0
C 0 0 3

> 
> ### proportion of usable cases
> p$mr/(p$mr+p$mm)
          A B C
A 0.0000000 0 1
B 0.3333333 0 1
C 1.0000000 1 0
> 
> ### outbound statistics
> p$rm/(p$rm+p$rr)
    A         B   C
A 0.0 0.1666667 0.5
B 0.0 0.0000000 0.6
C 0.4 0.6000000 0.0
> 
> 
> fluxplot(pattern2)
> 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’

> nameEx("pool")
> ### * pool
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pool
> ### Title: Combine estimates by Rubin's rules
> ### Aliases: pool
> ### Keywords: htest
> 
> ### ** Examples
> 
> # pool using the classic MICE workflow
> imp <- mice(nhanes, maxit = 2, m = 2)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
> fit <- with(data = imp, exp = lm(bmi ~ hyp + chl))
> summary(pool(fit))
               estimate  std.error  statistic        df      p.value
(Intercept) 23.28437718 3.71778332  6.2629732 20.236451 3.871788e-06
hyp         -1.21491994 2.84089383 -0.4276541  2.678843 7.009157e-01
chl          0.02468758 0.02464751  1.0016257  3.187404 3.863813e-01
> 
> 
> 
> cleanEx()
> nameEx("pool.compare")
> ### * pool.compare
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pool.compare
> ### Title: Compare two nested models fitted to imputed data
> ### Aliases: pool.compare
> ### Keywords: htest
> 
> ### ** Examples
> 
> 
> ### To compare two linear models:
> imp <- mice(nhanes2, seed = 51009, print = FALSE)
> mi1 <- with(data = imp, expr = lm(bmi ~ age + hyp + chl))
> mi0 <- with(data = imp, expr = lm(bmi ~ age + hyp))
> pc  <- pool.compare(mi1, mi0)
> pc$pvalue
           [,1]
[1,] 0.01119628
> 
> ### Comparison of two general linear models (logistic regression).
> ## Not run: 
> ##D imp  <- mice(boys, maxit = 2, print = FALSE)
> ##D fit1 <- with(imp, glm(gen > levels(gen)[1] ~ hgt + hc + reg, family = binomial))
> ##D fit0 <- with(imp, glm(gen > levels(gen)[1] ~ hgt + hc, family = binomial))
> ##D pool.compare(fit1, fit0, method = 'likelihood')$pvalue
> ##D 
> ##D # using factors
> ##D fit1 <- with(imp, glm(as.factor(gen > levels(gen)[1]) ~ hgt + hc + reg, family = binomial))
> ##D fit0 <- with(imp, glm(as.factor(gen > levels(gen)[1]) ~ hgt + hc, family = binomial))
> ##D pool.compare(fit1, fit0, method = 'likelihood')$pvalue
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("pool.r.squared")
> ### * pool.r.squared
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pool.r.squared
> ### Title: Pooling: R squared
> ### Aliases: pool.r.squared
> ### Keywords: htest
> 
> ### ** Examples
> 
> 
> 
> imp<-mice(nhanes)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> 
> fit<-lm.mids(chl~age+hyp+bmi,imp)
> pool.r.squared(fit)
          est     lo 95     hi 95 fmi
R^2 0.4796949 0.1313386 0.7539829 NaN
> pool.r.squared(fit,adjusted=TRUE)
              est    lo 95    hi 95 fmi
adj R^2 0.4043173 0.068092 0.712503 NaN
> 
> #fit<-lm.mids(chl~age+hyp+bmi,imp)
> #
> #> pool.r.squared(fit)
> #          est     lo 95     hi 95       fmi
> #R^2 0.5108041 0.1479687 0.7791927 0.3024413
> #
> #> pool.r.squared(fit,adjusted=TRUE)
> #          est      lo 95    hi 95       fmi
> #adj R^2 0.4398066 0.08251427 0.743172 0.3404165
> #
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("pool.scalar")
> ### * pool.scalar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pool.scalar
> ### Title: Multiple imputation pooling: univariate version
> ### Aliases: pool.scalar
> ### Keywords: htest
> 
> ### ** Examples
> 
> 
> 
> imp <- mice(nhanes)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> m <- imp$m
> Q <- rep(NA, m)
> U <- rep(NA, m)
> for (i in 1:m) {
+    Q[i] <- mean(complete(imp, i)$bmi)
+    U[i] <- var(complete(imp, i)$bmi) / nrow(nhanes)  # (standard error of estimate)^2
+ }
> pool.scalar(Q, U, n = nrow(nhanes), k = 1)  # Barnard-Rubin 1999
$m
[1] 5

$qhat
[1] 26.588 26.212 25.864 25.784 27.436

$u
[1] 0.5602107 0.5502440 0.5927627 0.6371227 0.5921293

$qbar
[1] 26.3768

$ubar
[1] 0.5864939

$b
[1] 0.4520112

$t
[1] 1.128907

$df
[1] 6.928458

$r
[1] 0.9248408

$fmi
[1] 0.5851299

> 
> 
> 
> 
> cleanEx()
> nameEx("popmis")
> ### * popmis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: popmis
> ### Title: Hox pupil popularity data with missing popularity scores
> ### Aliases: popmis
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> popmis[1:3,]
  pupil school popular sex texp const teachpop
1     1      1      NA   1   24     1        7
2     2      1      NA   0   24     1        7
3     3      1       7   1   24     1        6
> 
> 
> 
> 
> cleanEx()
> nameEx("pops")
> ### * pops
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pops
> ### Title: Project on preterm and small for gestational age infants (POPS)
> ### Aliases: pops pops.pred
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> 
> pops <- data(pops)
> 
> 
> 
> 
> cleanEx()
> nameEx("potthoffroy")
> ### * potthoffroy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: potthoffroy
> ### Title: Potthoff-Roy data
> ### Aliases: potthoffroy
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> 
> ### create missing values at age 10 as in Little and Rubin (1987)
> 
> phr <- potthoffroy
> idmis <- c(3,6,9,10,13,16,23,24,27)
> phr[idmis, 4] <- NA
> phr
   id sex   d8  d10  d12  d14
1   1   F 21.0 20.0 21.5 23.0
2   2   F 21.0 21.5 24.0 25.5
3   3   F 20.5   NA 24.5 26.0
4   4   F 23.5 24.5 25.0 26.5
5   5   F 21.5 23.0 22.5 23.5
6   6   F 20.0   NA 21.0 22.5
7   7   F 21.5 22.5 23.0 25.0
8   8   F 23.0 23.0 23.5 24.0
9   9   F 20.0   NA 22.0 21.5
10 10   F 16.5   NA 19.0 19.5
11 11   F 24.5 25.0 28.0 28.0
12 12   M 26.0 25.0 29.0 31.0
13 13   M 21.5   NA 23.0 26.5
14 14   M 23.0 22.5 24.0 27.5
15 15   M 25.5 27.5 26.5 27.0
16 16   M 20.0   NA 22.5 26.0
17 17   M 24.5 25.5 27.0 28.5
18 18   M 22.0 22.0 24.5 26.5
19 19   M 24.0 21.5 24.5 25.5
20 20   M 23.0 20.5 31.0 26.0
21 21   M 27.5 28.0 31.0 31.5
22 22   M 23.0 23.0 23.5 25.0
23 23   M 21.5   NA 24.0 28.0
24 24   M 17.0   NA 26.0 29.5
25 25   M 22.5 25.5 25.5 26.0
26 26   M 23.0 24.5 26.0 30.0
27 27   M 22.0   NA 23.5 25.0
> 
> md.pattern(phr)
   id sex d8 d12 d14 d10  
18  1   1  1   1   1   1 0
9   1   1  1   1   1   0 1
    0   0  0   0   0   9 9
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("quickpred")
> ### * quickpred
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: quickpred
> ### Title: Quick selection of predictors from the data
> ### Aliases: quickpred
> ### Keywords: misc
> 
> ### ** Examples
> 
> 
> 
> # default: include all predictors with absolute correlation over 0.1
> quickpred(nhanes)
    age bmi hyp chl
age   0   0   0   0
bmi   1   0   1   1
hyp   1   0   0   1
chl   1   1   1   0
> 
> # all predictors with absolute correlation over 0.4
> quickpred(nhanes, mincor=0.4)
    age bmi hyp chl
age   0   0   0   0
bmi   0   0   0   0
hyp   1   0   0   1
chl   1   0   1   0
> 
> # include age and bmi, exclude chl
> quickpred(nhanes, mincor=0.4, inc=c('age','bmi'), exc='chl')
    age bmi hyp chl
age   0   0   0   0
bmi   1   0   0   0
hyp   1   1   0   0
chl   1   1   1   0
> 
> # only include predictors with at least 30% usable cases
> quickpred(nhanes, minpuc=0.3)
    age bmi hyp chl
age   0   0   0   0
bmi   1   0   0   0
hyp   1   0   0   0
chl   1   1   1   0
> 
> # use low threshold for bmi, and high thresholds for hyp and chl
> pred <- quickpred(nhanes, mincor=c(0,0.1,0.5,0.5))
> pred
    age bmi hyp chl
age   0   0   0   0
bmi   1   0   1   1
hyp   1   0   0   0
chl   1   0   0   0
> 
> # use it directly from mice
> imp <- mice(nhanes, pred=quickpred(nhanes, minpuc=0.25, include='age'))

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> 
> 
> 
> 
> cleanEx()
> nameEx("rbind.mids")
> ### * rbind.mids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rbind.mids
> ### Title: Combine 'mids' objects by rows
> ### Aliases: rbind.mids
> ### Keywords: manip
> 
> ### ** Examples
> 
> imp1 <- mice(nhanes[1:13, ], m = 2, maxit = 1, print = FALSE)
Warning: Number of logged events: 1
> imp5 <- mice(nhanes[1:13, ], m = 2, maxit = 2, print = FALSE)
Warning: Number of logged events: 1
> mylist <- list(age = NA, bmi = NA, hyp = NA, chl = NA)
> 
> nrow(complete(rbind(imp1, imp5)))
Warning: iterations differ, so no convergence diagnostics calculated
[1] 26
> nrow(complete(rbind(imp1, mylist)))
[1] 14
> 
> nrow(complete(rbind(imp1, data.frame(mylist))))
[1] 14
> nrow(complete(rbind(imp1, complete(imp5))))
[1] 26
> 
> 
> 
> cleanEx()
> nameEx("selfreport")
> ### * selfreport
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: selfreport
> ### Title: Self-reported and measured BMI
> ### Aliases: selfreport mgg
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> 
> md.pattern(selfreport[,c("age","sex","hm","hr","wm","wr")])
     age sex hr wr  hm  wm     
1257   1   1  1  1   1   1    0
803    1   1  1  1   0   0    2
       0   0  0  0 803 803 1606
> 
> ### FIMD Section 7.3.5 Application
> 
> bmi <- function(h,w){return(w/(h/100)^2)}
> init <- mice(selfreport,maxit=0)
Warning: Number of logged events: 2
> meth <- init$meth
> meth["bm"] <- "~bmi(hm,wm)"
> pred <- init$pred
> pred[,c("src","id","web","bm","br")] <- 0
> imp <- mice(selfreport, pred=pred, meth=meth, seed=66573, maxit=2, m=1)

 iter imp variable
  1   1  hm  wm  edu  etn  bm
  2   1  hm  wm  edu  etn  bm
Warning: Number of logged events: 6
> ## imp <- mice(selfreport, pred=pred, meth=meth, seed=66573, maxit=20, m=10)
> 
> ### Like FIMD Figure 7.6 
> 
> cd <- complete(imp, 1)
> xy <- xy.coords(cd$bm, cd$br-cd$bm)
> plot(xy,col=mdc(2),xlab="Measured BMI",ylab="Reported - Measured BMI",
+     xlim=c(17,45),ylim=c(-5,5), type="n",lwd=0.7)
> polygon(x=c(30,20,30),y=c(0,10,10),col="grey95",border=NA) 
> polygon(x=c(30,40,30),y=c(0,-10,-10),col="grey95",border=NA)
> abline(0,0,lty=2,lwd=0.7)
> 
> idx <- cd$src=="krul"
> xyc <- xy; xyc$x <- xy$x[idx]; xyc$y <- xy$y[idx]
> xys <- xy; xys$x <- xy$x[!idx]; xys$y <- xy$y[!idx]
> points(xyc,col=mdc(1), cex=0.7)
> points(xys,col=mdc(2), cex=0.7)
> lines(lowess(xyc),col=mdc(4),lwd=2)
> lines(lowess(xys),col=mdc(5),lwd=2)
> text(1:4,x=c(40,28,20,32),y=c(4,4,-4,-4),cex=3)
> box(lwd=1)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("stripplot.mids")
> ### * stripplot.mids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stripplot.mids
> ### Title: Stripplot of observed and imputed data
> ### Aliases: stripplot.mids stripplot
> ### Keywords: hplot
> 
> ### ** Examples
> 
> imp <- mice(boys, maxit=1)

 iter imp variable
  1   1  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   2  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   3  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   4  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   5  hgt  wgt  bmi  hc  gen  phb  tv  reg
> 
> ### stripplot, all numerical variables
> ## Not run: stripplot(imp)
> 
> ### same, but with improved display
> ## Not run: stripplot(imp, col=c("grey",mdc(2)),pch=c(1,20))
> 
> ### distribution per imputation of height, weight and bmi
> ### labeled by their own missingness
> ## Not run: 
> ##D stripplot(imp, hgt+wgt+bmi~.imp, cex=c(2,4), pch=c(1,20),jitter=FALSE,
> ##D layout=c(3,1))
> ## End(Not run)
> 
> ### same, but labeled with the missingness of wgt (just four cases)
> ## Not run: 
> ##D stripplot(imp, hgt+wgt+bmi~.imp, na=wgt, cex=c(2,4), pch=c(1,20),jitter=FALSE,
> ##D layout=c(3,1))
> ## End(Not run)
> 
> ### distribution of age and height, labeled by missingness in height
> ### most height values are missing for those around 
> ### the age of two years
> ### some additional missings occur in region WEST
> ## Not run: stripplot(imp, age+hgt~.imp|reg, hgt, col=c(hcl(0,0,40,0.2), mdc(2)),pch=c(1,20))
> 
> ### heavily jitted relation between two categorical variables
> ### labeled by missingness of gen
> ### aggregated over all imputed data sets
> ## Not run: stripplot(imp, gen~phb, factor=2, cex=c(8,1), hor=TRUE)
> 
> ### circle fun
> stripplot(imp, gen~.imp, na = wgt, factor = 2, cex = c(8.6), 
+          hor = FALSE, outer = TRUE, scales = "free", pch = c(1,19))
> 
> 
> 
> 
> cleanEx()
> nameEx("supports.transparent")
> ### * supports.transparent
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: supports.transparent
> ### Title: Supports semi-transparent foreground colors?
> ### Aliases: supports.transparent transparent
> ### Keywords: hplot
> 
> ### ** Examples
> 
> 
> supports.transparent()
[1] TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("tbc")
> ### * tbc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tbc
> ### Title: Terneuzen birth cohort
> ### Aliases: tbc tbc.target terneuzen
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> data <- tbc
> md.pattern(data)
     id occ nocc first typ age sex wgt.z hgt.z bmi.z   ao     
1202  1   1    1     1   1   1   1     1     1     1    1    0
1886  1   1    1     1   1   1   1     1     1     1    0    1
331   1   1    1     1   1   1   1     1     0     0    1    2
522   1   1    1     1   1   1   1     1     0     0    0    3
3     1   1    1     1   1   1   1     0     1     0    1    2
7     1   1    1     1   1   1   1     0     1     0    0    3
      0   0    0     0   0   0   0    10   853   863 2415 4141
> 
> 
> 
> 
> cleanEx()
> nameEx("version")
> ### * version
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: version
> ### Title: Echoes the package version number
> ### Aliases: version
> ### Keywords: misc
> 
> ### ** Examples
> 
> 
> version()
[1] "mice 3.5.0 2019-05-13 /Users/buurensv/Package/mice/mice/mice.Rcheck"
> version("base")
[1] "base 3.6.0  /Library/Frameworks/R.framework/Resources/library"
> 
> 
> 
> 
> cleanEx()
> nameEx("walking")
> ### * walking
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: walking
> ### Title: Walking disability data
> ### Aliases: walking
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> md.pattern(walking)
    sex age src  YA  YB    
290   1   1   1   1   1   0
300   1   1   1   1   0   1
294   1   1   1   0   1   1
6     1   1   1   0   0   2
      0   0   0 300 306 606
> 
> micemill <- function(n) {
+  for (i in 1:n) {
+    imp <<- mice.mids(imp) # global assignment 
+    cors <- with(imp, cor(as.numeric(YA),
+                         as.numeric(YB),
+                         method="kendall"))
+    tau <<- rbind(tau, getfit(cors, s=TRUE))  # global assignment
+  }
+ }
> 
> plotit <- function()
+  matplot(x=1:nrow(tau),y=tau,
+        ylab=expression(paste("Kendall's ",tau)), 
+          xlab="Iteration", type="l", lwd=1,
+        lty=1:10,col="black")
> 
> tau <- NULL
> imp <- mice(walking, max=0, m=10, seed=92786)
> pred <- imp$pred
> pred[,c("src","age","sex")] <- 0
> imp <- mice(walking, max=0, m=3, seed=92786, pred=pred)
> micemill(5)

 iter imp variable
  1   1  YA  YB
  1   2  YA  YB
  1   3  YA  YB

 iter imp variable
  2   1  YA  YB
  2   2  YA  YB
  2   3  YA  YB

 iter imp variable
  3   1  YA  YB
  3   2  YA  YB
  3   3  YA  YB

 iter imp variable
  4   1  YA  YB
  4   2  YA  YB
  4   3  YA  YB

 iter imp variable
  5   1  YA  YB
  5   2  YA  YB
  5   3  YA  YB
> plotit()
> 
> ### to get figure 7.8 van Buuren (2012) use m=10 and micemill(20) 
> 
> 
> 
> 
> cleanEx()
> nameEx("windspeed")
> ### * windspeed
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: windspeed
> ### Title: Subset of Irish wind speed data
> ### Aliases: windspeed
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> windspeed[1:3,]
  RochePt Rosslare Shannon Dublin Clones MalinHead
1    4.92     7.29    3.67   3.71   2.71      7.83
2   22.50    19.41   16.13  16.08  16.58     19.67
3    7.54     9.29   11.00   1.71   9.71     15.37
> 
> 
> 
> 
> cleanEx()
> nameEx("with.mids")
> ### * with.mids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: with.mids
> ### Title: Evaluate an expression in multiple imputed datasets
> ### Aliases: with.mids
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> 
> 
> imp <- mice(nhanes2)

 iter imp variable
  1   1  bmi  hyp  chl
  1   2  bmi  hyp  chl
  1   3  bmi  hyp  chl
  1   4  bmi  hyp  chl
  1   5  bmi  hyp  chl
  2   1  bmi  hyp  chl
  2   2  bmi  hyp  chl
  2   3  bmi  hyp  chl
  2   4  bmi  hyp  chl
  2   5  bmi  hyp  chl
  3   1  bmi  hyp  chl
  3   2  bmi  hyp  chl
  3   3  bmi  hyp  chl
  3   4  bmi  hyp  chl
  3   5  bmi  hyp  chl
  4   1  bmi  hyp  chl
  4   2  bmi  hyp  chl
  4   3  bmi  hyp  chl
  4   4  bmi  hyp  chl
  4   5  bmi  hyp  chl
  5   1  bmi  hyp  chl
  5   2  bmi  hyp  chl
  5   3  bmi  hyp  chl
  5   4  bmi  hyp  chl
  5   5  bmi  hyp  chl
> fit1 <- with(data=imp,exp=lm(bmi~age+hyp+chl))
> fit2 <- with(data=imp,exp=glm(hyp~age+bmi+chl,family=binomial))
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
Warning: glm.fit: algorithm did not converge
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
> anova.imp <- with(data=imp,exp=anova(lm(bmi~age+hyp+chl)))
> 
> 
> 
> cleanEx()
> nameEx("xyplot.mids")
> ### * xyplot.mids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: xyplot.mids
> ### Title: Scatterplot of observed and imputed data
> ### Aliases: xyplot.mids xyplot
> ### Keywords: hplot
> 
> ### ** Examples
> 
> imp <- mice(boys, maxit=1)

 iter imp variable
  1   1  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   2  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   3  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   4  hgt  wgt  bmi  hc  gen  phb  tv  reg
  1   5  hgt  wgt  bmi  hc  gen  phb  tv  reg
> 
> ### xyplot: scatterplot by imputation number
> ### observe the erroneous outlying imputed values
> ### (caused by imputing hgt from bmi)
> xyplot(imp, hgt~age|.imp, pch=c(1,20),cex=c(1,1.5))
> 
> ### same, but label with missingness of wgt (four cases)
> xyplot(imp, hgt~age|.imp, na.group=wgt, pch=c(1,20),cex=c(1,1.5))
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  12.605 0.436 13.173 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
